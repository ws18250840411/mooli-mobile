import React from 'react';
import { Placements, Feedback } from './lib/getPlacement';
import Popup, { PopupProps } from '../popup';
import { PortalProps } from '../portal';
export declare type ActionType = 'click' | 'contextMenu' | 'focus' | 'hover' | 'mouseDown';
export declare type ShowActionType = 'click' | 'contextMenu' | 'focus' | 'mouseEnter' | 'mouseDown';
export declare type HideActionType = 'click' | 'mouseLeave' | 'blur' | 'resize' | 'mouseDown';
export interface Delay {
    show?: number;
    hide?: number;
}
export declare function feedbackToPlacement(feedback: Feedback): any;
export interface TriggerProps {
    prefixCls?: string;
    placement?: Placements;
    offset?: [number, number] | number;
    action?: ActionType | ActionType[] | null;
    showAction?: ShowActionType | ShowActionType[] | null;
    hideAction?: HideActionType | HideActionType[] | null;
    outsideHideEventName?: any;
    delay?: number | Delay;
    disabled?: boolean;
    popup?: React.ReactNode | ((trigger: Trigger) => React.ReactNode);
    popupClassName?: string;
    popupMaskClassName?: string;
    popupRootClassName?: string;
    popupTransition?: PopupProps['transition'];
    popupMaskTransition?: PopupProps['maskTransition'];
    defaultPopupVisible?: boolean;
    popupVisible?: boolean;
    popupProps?: PopupProps;
    popupStyle?: React.CSSProperties;
    popupMaskStyle?: React.CSSProperties;
    popupRootStyle?: React.CSSProperties;
    popupMaskProps?: PopupProps['maskProps'];
    aequilate?: boolean;
    mask?: boolean;
    disableMask?: boolean;
    maskClosable?: boolean;
    destroyPopupOnHide?: boolean;
    zIndex?: number;
    usePortal?: boolean;
    forceRender?: boolean;
    position?: string;
    container?: PortalProps['container'];
    getDocument?: () => Document | Element;
    checkDefaultPrevented?: boolean;
    onPopupVisibleChange?: (visible: boolean) => void;
    onBeforeShow?: (popupNode: HTMLElement) => void;
    onAfterShow?: (popupNode: HTMLElement) => void;
    onBeforeHide?: (popupNode: HTMLElement) => void;
    onAfterHide?: (popupNode: HTMLElement) => void;
}
export interface TriggerState {
    popupVisible: boolean;
    mounted?: PortalProps['container'] | null;
}
export declare class Trigger extends React.Component<TriggerProps, TriggerState> {
    static defaultProps: TriggerProps;
    protected triggerRef: React.RefObject<any>;
    constructor(props: TriggerProps);
    static getDerivedStateFromProps(nextProps: TriggerProps, state: TriggerState): {
        popupVisible: boolean;
    };
    state: Readonly<TriggerState>;
    protected delayTimer: number | null;
    popupInstance: Popup | undefined;
    triggerInstance: React.ReactInstance | undefined;
    protected clickOutsideHandler: null | (() => void) | undefined;
    protected touchOutsideHandler: null | (() => void) | undefined;
    protected contextMenuOutsideHandler1: null | (() => void) | undefined;
    protected contextMenuOutsideHandler2: null | (() => void) | undefined;
    protected windowScrollHandler: null | (() => void) | undefined;
    protected windowResizeHandler: null | (() => void) | undefined;
    componentDidMount(): void;
    componentDidUpdate(): void;
    componentWillUnmount(): void;
    protected togglePopupCloseEvents(): void;
    getTriggerNode(): HTMLElement;
    getPopupNode(): HTMLElement | null | undefined;
    protected getComponentNode(): HTMLElement;
    protected onOutsideClickToHide: (event: MouseEvent) => void;
    protected clearOutsideHandler(): void;
    protected _setPopupVisible(popupVisible: boolean): void;
    show(): void;
    hide(): void;
    protected clearDelayTimer(): void;
    protected getDelayTime(action?: 'show' | 'hide'): number;
    protected delaySetPopupVisible(visible: boolean): void;
    protected checkToShow(actions: Array<ActionType | ShowActionType>): boolean;
    protected checkToHide(actions: Array<ActionType | HideActionType>): boolean;
    protected isContextMenuToShow(): boolean;
    protected isMouseDownToShow(): boolean;
    protected isMouseDownToHide(): boolean;
    protected isClickToShow(): boolean;
    protected isClickToHide(): boolean;
    protected isMouseEnterToShow(): boolean;
    protected isMouseLeaveToHide(): boolean;
    protected isFocusToShow: () => boolean;
    protected isBlurToHide: () => boolean;
    protected isWindowResizeToHide: () => boolean;
    protected onContextMenu(e: React.MouseEvent): void;
    protected onTriggerClick(): void;
    protected onTriggerMouseDown(): void;
    protected onMouseEnter: () => void;
    protected onMouseLeave: () => void;
    protected onFocus: () => void;
    protected onBlur: () => void;
    protected onContextMenuClose: () => void;
    protected removeClassNames(popupNode: HTMLElement): void;
    protected addPlacementClassName(popupNode: HTMLElement, feedback: Feedback): void;
    protected setPopupPosition(popupRootNode: HTMLElement): void;
    updatePopupPosition(): void;
    protected getPopupComponent(): JSX.Element;
    protected genNewChildProps(child: React.ReactElement): React.HTMLAttributes<any>;
    render(): JSX.Element;
}
export default Trigger;
