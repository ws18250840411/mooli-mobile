import * as React from 'react';
import PropTypes from 'prop-types';
import SwiperItem from './swiper-item';
import { MooliCarouselType } from 'mooli-carousel';
export interface SwiperProps {
    mode?: 'slide' | 'scroll';
    initial?: number;
    loop?: boolean;
    autoPlay?: boolean | number;
    indicator?: boolean;
    touchable?: boolean;
    thumb?: boolean;
    thumbNode?: React.ReactNode;
    progress?: boolean;
    align?: 'start' | 'center' | 'end' | number;
    vertical?: boolean;
    slideNums?: number;
    direction?: 'ltr' | 'rtl';
    scale?: boolean;
    arrow?: boolean;
    arrowIcon?: string;
    className?: string;
    style?: React.CSSProperties;
    children?: React.ReactNode;
    onChange?: (index: number) => void;
    onScroll?: (index: number, progress: number) => void;
    onRef?: (ref: MooliCarouselType) => void;
}
interface SwiperStates {
    prevBtnEnabled: boolean;
    nextBtnEnabled: boolean;
    selectedIndex: number;
    scrollProgress: number;
    scrollSnaps: number[];
}
export default class Swiper extends React.PureComponent<SwiperProps, SwiperStates> {
    static Item: typeof SwiperItem;
    static displayName: 'Swiper';
    static propTypes: {
        mode: PropTypes.Requireable<string>;
        initial: PropTypes.Requireable<number>;
        loop: PropTypes.Requireable<boolean>;
        autoPlay: PropTypes.Requireable<number | boolean>;
        indicator: PropTypes.Requireable<boolean>;
        touchable: PropTypes.Requireable<boolean>;
        thumb: PropTypes.Requireable<boolean>;
        thumbNode: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        progress: PropTypes.Requireable<boolean>;
        vertical: PropTypes.Requireable<boolean>;
        slideNums: PropTypes.Requireable<number>;
        scale: PropTypes.Requireable<boolean>;
        arrow: PropTypes.Requireable<boolean>;
        arrowIcon: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
        style: PropTypes.Requireable<object>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onScroll: PropTypes.Requireable<(...args: any[]) => any>;
        onRef: PropTypes.Requireable<(...args: any[]) => any>;
    };
    static defaultProps: {
        mode: string;
        loop: boolean;
        autoPlay: boolean;
        arrow: boolean;
        indicator: boolean;
        thumb: boolean;
        vertical: boolean;
        progress: boolean;
        scale: boolean;
        touchable: boolean;
        initial: number;
        slideNums: number;
        direction: string;
        align: string;
        arrowIcon: string;
    };
    protected rafId: number;
    protected timer: any;
    protected isAutoplay: any;
    protected embla: MooliCarouselType | null;
    protected emblaThumbs: MooliCarouselType | null;
    protected viewportRef: React.RefObject<any>;
    protected thumbViewportRef: React.RefObject<any>;
    constructor(props: SwiperProps);
    componentDidMount(): void;
    componentDidUpdate(_prevProps: any, prevState: any): void;
    componentWillUnmount(): void;
    initViewport: () => void;
    initThumbViewport: () => void;
    onThumbClick: (index: number) => void;
    autoplay: () => void;
    play: () => void;
    stop: () => void;
    scrollNext: () => void;
    scrollPrev: () => void;
    onSelect: () => void;
    onScroll: () => void;
    render(): JSX.Element;
}
export {};
